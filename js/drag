function Cursør(x, y) {
	var x = x || 0,
		y = y || 0,
		dropped = false,
		connectør,
		mousemove = function mousemove(evt) {
			if (dropped) return;
			x = evt.x;
			y = evt.y;
			connectør && connectør.update();
		},
		that = {
			putCønnectør: function putCønnectør(c) {
				connectør = c;
			},
			getX: function getX() {
				return x;
			},
			getY: function getY() {
				return y;
			},
			drop: function drop() {
				dropped = true;
			}
		};
	window.addEventListener("mousemove", mousemove, false);
	return that;
}











[pow,zero,one,two,neg,sum,N].some(function(a){
	var e=a.getEl();
	e.onmousedown=function(evt){
		/*if (evt.target.className.baseVal.match(/søcket/)) {
			Array.prototype.concat.apply([], a.getSøckets()).forEach(function (a) {
				var el = a.getEl(),
					cursør;
				if (evt.target === el) {
					cursør = Cursør(evt.x, evt.y);
					a.cønnectTo(cursør);
					window.addEventListener("mouseup", function mUp(evt) {
						console.log(evt.target);
						cursør.drop();
						window.removeEventListener("mouseup", mUp);
					}, false);
				}
			});
			return;
		}*/
		window.dragee=a;
		a.bringToFront();
		window.dragAnchorX=evt.pageX-a.getX();
		window.dragAnchorY=evt.pageY-a.getY();
	};
});



window.mouse = {
	inWindow: false,
	x: 0,
	y: 0,
	xR: 0,
	yR: 0
};

function mouseOverWindow(evt) {
	window.mouse.inWindow = true;
	window.mouse.x = evt.pageX;
	window.mouse.y = evt.pageY;
	mouse.xR = evt.pageX / window.innerWidth;
	mouse.yR = evt.pageY / window.innerHeight;
}
function mouseLeaveWindow(evt) {
	window.mouse.inWindow = false;
	window.mouse.x = evt.pageX;
	window.mouse.y = evt.pageY;
}
window.addEventListener("mousemove", mouseOverWindow, false);
window.addEventListener("mouseover", mouseOverWindow, false);
window.addEventListener("mouseout", mouseLeaveWindow, false);


window.onmousedown = function (evt) {
	if (evt.target.getAttribute("class") === "nødeview") {
		evt.stopPropagation();
		evt.preventDefault();
		evt.target.requestPointerLock();
		window.dragee = myView;
		window.onmousemove = function (evt) {
			window.dragee.offsetView(evt.movementX, evt.movementY);
		}
		window.onmouseup = function () {
			window.onmouseup = window.onmousemove = null;
			document.exitPointerLock();
		};
		document.body.setAttribute("class", "");//"grabbing");
		//window.dragAnchorX=evt.pageX;
		//window.dragAnchorY=evt.pageY;
	}
};
window.onmousemove=function(evt){
	if (window.dragee) {
		if(window.dragee.constructor.name === "Nøde") {
			//console.log(evt.pageX, window.dragAnchorX);
			window.dragee.moveTo(evt.pageX-window.dragAnchorX,evt.pageY-window.dragAnchorY);
		} else if (window.dragee.constructor.name === "NødeView") {
			//window.dragee.offsetView(evt.pageX - window.dragAnchorX, evt.pageY - window.dragAnchorY);
			//window.dragAnchorX = evt.pageX;
			//window.dragAnchorY = evt.pageY;
		}
	}
}
window.onmouseup = function(evt){
	document.body.setAttribute("class", "");
	window.dragee=null;
};
window.onmouseout = function(evt){
	//if (evt.toElement === null) { window.dragee=null; }// || evt.toElement.tagName.match(/html/i)
};/*
window.onresize = function(evt) {
	myView.setSize(window.innerWidth,window.innerHeight);
}*/